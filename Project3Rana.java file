public  class Project3Rana{

static class TrafficMinimization{
	     
public int performServerplacement (int[] client_array, int k_servers) {
int len = client_array.length;

int[][][] result = getMatrixForOneServer(client_array, k_servers, 
	new int[len][len][k_servers+1], len);
	   
if(k_servers>1) 
result = getMatrixForRestOfServers(client_array, k_servers, result,
	    len);
	            
for(int i=1 ; i <= k_servers; i++){
//to calculate values when server is equal to 1
public int[][][] getMatrixForOneServer(int[] client_array, int k_servers,int[][][] result, int len){
    for(int i = 0; i < len; i++) {
        for(int j = 0; j < len; j++) {
              int total = 0;
              for(int p = j; p >= i; p--) {
                  total += client_array[p];
              }
              double inter_value = client_array[j];
            int server_position = j;
            while(inter_value <= (total/2.0)) {
                server_position--;
                inter_value += client_array[server_position];
            }
            result[i][j][1] = 0;
            for(int m = i; m <= j; m++) {
                result[i][j][1] += client_array[m]*Math.abs(m - server_position);
            }
} }
    return result;
}
// to calculate values when server are more than 1
public int[][][] getMatrixForRestOfServers(int[] client_array, int k_servers,int[][][] result, int len){
    for(int j = 1; j < len; j++) {
        for(int server_no = 2; server_no <= k_servers && server_no < j+1;
server_no++) {
result[0][j][server_no] = Integer.MAX_VALUE;

for(int p = server_no-2; p < j; p++) {
	result[0][j][server_no] = Math.min(result[0][j][server_no],
result[0][p][server_no-1] + result[p+1][j][1]);
} }
}
    return result;
}
		

}	
public static void main(String[] args) {


       int ar[];
       ar=getArray(10);
       print(ar,3);
       ar=getArray(100);
       print(ar,30);
       ar=getArray(100);
       print(ar,30);
       ar=getArray(500);
       print(ar,30);
   }
   static void print(int array[],int k){
       TrafficMinimization t = new TrafficMinimization();
       long startTime = System.nanoTime();
       int val=t.performServerplacement(array, k);
       long endTime = System.nanoTime();
       long duration = (endTime - startTime);
       System.out.println("number of client:"+(array.length)+" execution time= " +duration+" ns");
       System.out.println(val);
   }
   static int[] getArray(int length){
       int arr[]=new int[length];
       for(int i=0;i<length;i++){
           arr[i]=(int)(Math.random()*length);
       }
       return arr;
   }

}
